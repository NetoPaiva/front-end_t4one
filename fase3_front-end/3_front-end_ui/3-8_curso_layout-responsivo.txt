https://cursos.alura.com.br/course/mobile-first-layouts-responsivos

Alura, curso, front-end, ONE, t4f3


Referências:

- Projeto inicial
https://github.com/alura-cursos/projeto-apeperia/archive/b2501c63b2ebdfd8226473a6c8ffa8777e559efe.zip

- Visual Studio Code:
  https://code.visualstudio.com/

- Projeto Figma
https://www.figma.com/file/FidBn9f7BoBCoEs19EzbUD/Apeperia-Mobile-First


Front-end / Cursos de HTML e CSS


Curso

# Layouts Responsivos: trabalhando com layouts mobile

  - Processo de desenvolvimento web
  - Escrita de código com plugin Emmet/VS Code
  - Manutenção de código com variáveis CSS
  - Acessibilidade e SEO com códigos semânticos
  - Diferentes layouts
  - Responsividade

  Capacitação para criar páginas
    - com base em layouts prontos
    - responsivas (adaptação a diversos dispositivos)


#### Aulas


## 1.  Ferramentas, unidades e imagens 


### 1.1.  Arquivos iniciais do projeto

- baixar os arquivos do projeto / GitHub
- abrir layout do projeto / Figma
- abrir projeto no VS Code
  - Arquivo
  - Abrir pastas
  - Selecionar a pasta do projeto no computador
  - OK

- ambiente de trabalho está pronto.


### 1.2.  Introdução

  - Desenvolvimento Web
    - projeto responsivo
    - seguir layout no Figma
    - conceito mobile first
    - plugin Emmet
    - variáveis CSS
    - tipos de imagens
      - semântica
      - media types


### 1.3.  Introdução ao Emmet

- Criar "index.html"
  - VS Code
    - pasta do projeto
    - códigos novo arquivo
    - nomear "index.html"

- Criar base do HTML
  - no arquivo "index.html"
    - digitar
      "html:5" + tecla enter
        - Plugin Emmet cria a estrutura básica

- Alterar os campos
  - idioma da página
    lang="pt-BR"
  - título da página
    <title>Home | Apeperia</title>

- Verificar layout no Figma
  - versão mobile
  
- Estrutura dos elementos

  - tela 1 - inicial
    - cabeçalho
      - logo
    - navegação
      - lista links
    - seção principal (main)
      - título
      - parágrafo
      - link aparência de botão

  - tela 2 - seção de destaques
    - postagens
      - fotos
      - texto
    - parágrafo / botão

  - tela 3 - seção de diferenciais
    - lista

  - tela 4 - seção "sobre"
    - texto
    - ícones
    - links

  - tela 5 - seção "planos"
    - destino do link dos "parágrafos/botões"
    - cards
      - textos
      - botões para assinatura do plano

  - tela 6 - seção "contato"
    - texto
    - parágrafo/botão

  - tela 7 - seção "institucional"
    - textos
    - links
    - vídeo

  - tela 8 - rodapé
    - logo da páginas
    - logo redes sociais
    - links das seções


#### Início do desenvolvimento

- tela 1
    - tirar print da tela do figma

- Cabeçalho - estrutura HTML
  - header
    - img (logo)
    - nav (links)
      - ul (lista de links)
        - li (6 links)
          - a (uma em cada li)

- Criar elementos no HTML com a sintaxe do Emmet

  - digitar após a tag de abertura do "body"
    header>img+nav>ul>li*6>a
    enter

[antes de criar a estrutura, ver OBS do item 1.4.]
    
  - isso quer dizer para o Emmet
    - tag header é pai das tags img e nav
    - tag nav é pai da tag ul
    - tag ul é pai das 6 tags li
    - cada tag li tem 1 tag a


  ! MAGIC !

  - a estrutura ficará assim
    <header>
      <img src="" alt="">
      <nav>
        <ul>
          <li><a href="" class=""></a></li>
          <li><a href="" class=""></a></li>
          <li><a href="" class=""></a></li>
          <li><a href="" class=""></a></li>
          <li><a href="" class=""></a></li>
          <li><a href="" class=""></a></li>
        </ul>
      </nav>
    </header>


- Editar estrutura do Header

  - Incluir as informações em cada tag

    - img
      - src="img/logo-apeperia.svg"
      - alt="Logo da Apeperia"

    - a (nome das seções)
      - >Sobre</a>
      - >Planos</a>
      - >Blog</a>
      - >Destaques</a>
      - >Institucional</a>
      - >Contato</a>

    - a (endereço do link)
      - ainda não tem o caminho
      - colocar # em cada elemento
      - href="#"

  - Estrutura do Header ficou assim

    <header>
      <img src="img/logo-apeperia.svg" alt="Logo da Apeperia">
      <nav>
        <ul>
          <li><a href="#" class="">Sobre</a></li>
          <li><a href="#" class="">Planos</a></li>
          <li><a href="#" class="">Blog</a></li>
          <li><a href="#" class="">Destaques</a></li>
          <li><a href="#" class="">Institucional</a></li>
          <li><a href="#" class="">Contato</a></li>
        </ul>
      </nav>
    </header>


- Editar estrutura do Main

  - criar a tag main abaixo do fechamento da tag header
    <main></main>

  - entre abertura e fechamento da tag main
  - criar a seção da chamada
    - digitar
      section>h1+p+a

  - estrutura inicial ficará asism
      <section>
        <h1></h1>
        <p></p>
        <a href=""></a>
      </section>

  - incluir os textos em cada tag
      <section>
        <h1>Aplicativos Na Medida</h1>
        <p>Apeperia tem um jeito inovador de comparar e montar aplicativos para pequenas e médias empresas.</p>
        <a href="#">Conheça os planos</a>
      </section>


### 1.4.  Aplicando estilos

  - Buscar informações de estilo dos elementos no Figma
  
  - Fontes
    - texto: Open Sans 300 / 400 / 700
    - títulos: Montserrat 300 / 400 / 700

  - Incorporar do Google Fonts
    - abrir aba no navegador
    - buscar Google Fonts
    - abrir site
    - procurar as fontes Opens Sans / Montserrat
    - selecionar as variações 300 / 400 / 700
    - copiar comando de incorporação das fontes
    - incluir no documento HTML
      - dentro da tag <head>
      - após a tag <title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Montserrat:wght@300;400;700&family=Open+Sans:wght@300;400;700&display=swap" rel="stylesheet">

  - Cores
    - já estão definidas
    - listadas em um arquivo de texto dentro da pasta do projeto
    - arquivos de estilos já estão criados (pasta css)
    - incorporar arquivos de estilo ao documento HTML
      - dentro da tag <head>
      - após a tag das fontes
        <link href="css/cabecalho.css" rel="stylesheet">
        <link href="css/chamada.css" rel="stylesheet">

  - Incluir nas tags HTML as classes dos seletores CSS
    - abrir os arquivos CSS "cabecalho" e "chamada"
    - todas as classes já no padrão BEM
      - classes para blocos específicos
        - nomes composto da classe interligado por 2 underscores

    - header tem:
      .cabecalho na tag header
      .cabecalho__logo na tag img
      .cabecalho__navegacao na tag nav
      .cabecalho__link nas tags li

    - chamada tem:
      .chamada na tag 
      .chamada__titulo
      .chamada__texto
      .chamada__botao

--------------------------------------------------

-OBS.:
  - a inclusão das classe poderia ter sido feita, de forma automática,
  junto com a criação da estrutura do "header", aproveitanto o recurso do Emmet.
  
  A sintaxe seria assim:

header.cabecalho>img.cabecalho__logo+nav.cabecalho__navegacao>ul>li*6>a.cabecalho__link

  A estrutura criada ficaria assim
      <header class="cabecalho">
        <img src="" alt="" class="cabecalho__logo">
        <nav class="cabecalho__navegacao">
          <ul>
            <li><a href="" class="cabecalho__link"></a></li>
            <li><a href="" class="cabecalho__link"></a></li>
            <li><a href="" class="cabecalho__link"></a></li>
            <li><a href="" class="cabecalho__link"></a></li>
            <li><a href="" class="cabecalho__link"></a></li>
            <li><a href="" class="cabecalho__link"></a></li>
          </ul>
        </nav>
      </header>

- O mesmo poderia ser feito para a seção "chamada" e para as próximas estruturas HTML a serem criadas no projeto

A sintaxe para criação da chamada seria
  section.chamada>h1.chamada__titulo+p.chamada__texto+a.chamada__botao

A Estrutura criada ficaria assim
      <section class="chamada">
        <h1 class="chamada__titulo"></h1>
        <p class="chamada__texto"></p>
        <a href="" class="chamada__botao"></a>
      </section>


[ !!!  MAGIA AINDA MAIS MÁGICA !!! ]

--------------------------------------------------









        =========================================

                  ... continua...

              [ aula pausada em 07:07 ]

        =========================================

            alterar dinâmica das aulas

                acelerar andamento

              otimizar anotações de aula

          maximizar desenvolvimento do projeto

          depois, retomar anotações detalhadas

        =========================================


























### 1.5.  REM e EM

  - vídeo aula

  - unidades de medida relativas

  - em = relativa ao font size do elemento pai
    - proporcional ao elemento pai
    - melhor se adapta em casos específicos
    
  - rem - relativa ao font size do elemento raiz (html)
    - proporcional ao documento todo
    - melhor se adapta aos diferentes navegadores em geral





### 1.6.  Unidades relativas REM e EM

  - atividade de fixação
    - comportamento das unidades relativas
      - rem
        - variável à raiz
        - proporcional ao "font-size" da tag <html>
      - em
        - variável ao "font-size" do elemento pai


### 1.7.  SVG e tipos de imagem na web

  - vídeo aula

  - svg
    - imagem formada por vetor (cálculos matemáticos)
    - formato sem compactação
    - melhor qualidade
    - permite alterar dimensões sem perder qualidade
    - arquivo mais leve (kb)
    - ideal para ícones, logos, desenhos / cores chapadas

  - png
    - imagem formada por pixel
    - formato pouco compactado
    - melhor resolução / qualidade
    - permite fundo transparente
    - arquivo mais pesado (mb)
    - ideal para fotos sem fundo

  - jpg
    - imagem formada por pixel
    - formato mais compactado
    - baixa resolução / qualidade
    - não permite fundo transparente
    - arquivo mais leve (kb)
    - ideal para fotos com fundo

  - gif
    - iamgem formada por pixel
    - formato pouco compactado
    - baixa resolução / qualidade
    - permite animação
    - arquivo com peso variado (depende da animação)
    - ideal para animação



### 1.8.  Usando SVG

  - atividade de fixação
    - quando usar svg
      - imagens vetoriais
        - ícones
        - logos


### 1.9.  Para saber mais: SVG

  - referência curso Alura
    https://cursos.alura.com.br/course/svg-css-animacao
  - não tem acesso


### 1.10. Faça como eu fiz na aula

  - praticar
  - desenvolver o projeto da aula
  - esclarecer dúvidas


### 1.11. O que aprendemos?

  - analisar / desmembrar layout recebido
  - criar blocos de código HTML com plugin Emmet
  - utilizar unidades de medida relativas (rem / em)
  - identificar tipos de imagens (svg)



## 2.  Layout mobile e variáveis CSS

### 2.1.  Projeto da aula anterior

  - link para baixar versão do projeto até o momento
    https://github.com/alura-cursos/projeto-apeperia/archive/Aula1.zip


### 2.2.  Conceitos de Mobile First

  - vídeo

  - demonstração do comportamento de layout
    - fixo
    - responsivo

  - fixo quando aberto em tela menor
    - quebra todo layout
    - visualização muito ruim
      - texto pequeno


### 2.3.  Seguindo um conceito

  - Razões para usar mobile first
    - maioria de acesso vendas online
    - design minimalista
    - foco em conteúdo

  - Razões para desktop first
    - interface mais elaborada
    - maior capacidade de banda e processamento
    - produtos otimizados para desktop

  - Analisar objetivo do projeto
    - perfil dos clientes
    - características
    - linguagem visual
    - custo
    - qual dispositivo é mais adequado

### 2.4.  Viewport e seu conteúdo

  - vídeo

  - analisar no navegador

  - declarar tag "meta viewport" no "header" do html
    - habilita navegador visualizar página como dispositivo móvel
    - largura = largura do dispositivo
    - escala inicial = escala da página é a mesma do dispositivo (1.0)

    <meta name="viewport" content="width=devide-width initial-scale=1.0">



### 2.5.  Variáveis CSS

  - vídeo

  - ajustar layout

  - base.css
    - arquivo com os estilos básicos da página

  - criar classe "container"

  - criar classe "botão"
    - utilizado em diversas partes da página



### 2.6.  Variáveis CSS

  - atividade de fixação

  - declarar e usar variáveis CSS
    - declarar no seletor "root{--nome-variavel:valor;}"
    - utilizar nos seletores dos elementos "var(--nome-variavel);"

  
### 2.7.  Faça como eu fiz na aula

  - implementar no projeto as etapas da aula
  - esclarecer dúvidas


### 2.8.  O que aprendemos?

  - definição/utilização mobile-first
  - funcionamento de "viewport / initial-scale"
  - declarar e chamar variáveis no CSS



## 3.  Particularidades de telas

### 3.1.  Projeto da aula anterior

  - link para baixar projeto início desta etapa
    https://github.com/alura-cursos/projeto-apeperia/archive/Aula2.zip


### 3.2.  Unidades de medida viewport

  - vídeo

  - desenvolver a seção de destaques
    - desmembrar elementos
    - definir classes


### 3.3.  As unidades de viewport

  - atividade de fixação
    - unidade "vw"
      - relacionada com a largura da tela (em px)


### 3.4.  Medidas absolutas e relativas

  - vídeo

  - quando usar absolutas e relativas


### 3.5.  Limitações dos dispositivos

  - vídeo

  - analisando largura das telas
  - espaçamentos


### 3.6.  Limitação de dispositivos

  - atividade de fixação
    - dispositivos móveis
      - complicado acesso de páginas web
        - velocidade de internet móvel (rede G)

### 3.7.  Responsividade

  - sugestão de curso (sem acesso)
    https://cursos.alura.com.br/course/web-design-responsivo


### 3.8.  Faça como eu fiz na aula

  - implementar projeto desenvolvido em aula
  - esclarecer dúvidas


### 3.9. O que aprendemos?

  - utilizar unidades de viewport (vw / vh)
  - diferenciara unidades absolutas / relativas
  - analisar limitações dos dispositivos



## 4.  Trabalhando a semântica HTML


### 4.1.  Projeto da aula anterior

  - link do projeto inicial desta etapa
      https://github.com/alura-cursos/projeto-apeperia/archive/Aula3.zip


### 4.2.  Preparando o ambiente

  - copiar códigos para utilizar nas próximas etapas do projeto

- Estrutura HTML seção "diferenciais"

  <section class="diferenciais container">
    <ul class="diferenciais__lista">
      <li class="diferenciais__item">
        <h2 class="item__titulo">Tempo</h2>
        <p class="item__texto">Tempo é importante! Trabalhamos em ritmo acelerado, atendendo rigorosamente aos prazos.</p>
      </li>
      <li class="diferenciais__item">
        <h2 class="item__titulo">Foco</h2>
        <p class="item__texto">Focamos no empreendimento! Oferecemos serviços de qualidade com preços acessíveis.</p>
      </li>
      <li class="diferenciais__item">
        <h2 class="item__titulo">Especialistas</h2>
        <p class="item__texto">Equipe experiente e especializada! Testamos todos os produtos antes do lançamento.</p>
      </li>
    </ul>
  </section>

- código CSS da seção "diferenciais"

.diferenciais {
  padding-top: 3.5rem;
  padding-bottom: 3.5rem;
}

.diferenciais__lista {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;
}

.diferenciais__item {
  max-width: 350px;

  box-sizing: border-box;

  padding: 2rem 0 2rem 5rem;
}

.item__titulo {
  color: var(--cinza-escuro);
  font-weight: 700;
  font-size: 1.2rem;
  text-transform: uppercase;

  margin-bottom: 1.5rem;
}

.item__texto {
  line-height: normal;
}


- código HTML da seção "sobre"

  <section class="sobre container">
    <div class="sobre__conteudo">
      <h2 class="sobre__titulo">Sobre</h2>
      <p class="sobre__texto">Criamos aplicativos personalizados para <strong class="sobre__texto--destaque">todas as pessoas</strong>!</p>
      <p class="sobre__texto">
        A manutenção de um aplicativo não pode ser um custo extra para o cliente, Na Apeperia você assina nosso serviço e a manutenção já está inclusa. Assim, você não se preocupa com manutenção, é tudo por nossa conta.
      </p>
      <p class="sobre__texto sobre__texto--destaque sobre__texto--divisao">
        Conte com uma equipe especializada e exclusiva pra projetos incríveis em qualquer plataforma.
      </p>
      <ul class="sobre__plataformas">
        <li><img src="img/android.png" alt="Ícone do Android"></li>
        <li><img src="img/blackberry.png" alt="Ícone da Blackberry"></li>
        <li><img src="img/apple.png" alt="Ícone da Apple"></li>
        <li><img src="img/windowsphone.png" alt="Ícone da Microsoft"></li>
      </ul>
      <p class="sobre__texto">Desenvolvemos aplicativos para todas as plataformas</p>
    </div>
    <img src="img/sobre-apeperia.png" alt="Sobre a Apeperia" class="sobre__imagem">
  </section>

- código CSS da seção "sobre"

.sobre {
  padding-top: 3rem;
  padding-bottom: 3rem;
}

.sobre__titulo {
  color: var(--cinza-escuro);
  font-weight: 700;
  font-size: 1.5rem;
  font-family: var(--montserrat);
  text-transform: uppercase;
  text-align: center;

  margin-bottom: 1.25rem;
}

.sobre__texto {
  line-height: normal;

  margin-bottom: 1rem;
}

.sobre__texto--destaque {
  color: var(--cinza-escuro);
  font-weight: 700;
}

.sobre__plataformas {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-evenly;

  margin-bottom: 1rem;
}


### 4.3.  Lidando com imagens

  - vídeo

  - trabalhar com imagens / ícones
    - uso é fundamental
    - estrutura ou estilização


### 4.4.  Preparando o ambiente

  - novos códigos para próxima etapa


- estrutura HTML seção "planos"

  <section class="planos container">
    <h2 class="planos__titulo">Planos</h2>
    <ul class="planos__cartoes">
      <li class="cartao cartao--start">
        <h3 class="cartao__titulo">Start</h3>
        <article class="cartao__conteudo">
          <p class="cartao__preco"><em>R$ 500</em></p>
          <p class="cartao__texto">5 manutenções mensais</p>
          <p class="cartao__texto">App SEO</p>
          <p class="cartao__texto">1 sistema operacional</p>
          <a href="plano.html" class="cartao__botao cartao__botao--start botao">Assinar plano</a>
        </article>
      </li>
      <li class="cartao cartao--ultra">
        <h3 class="cartao__titulo">Ultra</h3>
        <article class="cartao__conteudo">
          <p class="cartao__preco"><em>R$ 1500</em></p>
          <p class="cartao__texto">20 manutenções mensais</p>
          <p class="cartao__texto">App SEO</p>
          <p class="cartao__texto">4 sistemas operacionais</p>
          <p class="cartao__texto">24h de atendimento</p>
          <a href="" class="cartao__botao cartao__botao--ultra botao">Assinar plano</a>
        </article>
      </li>
      <li class="cartao cartao--mega">
        <h3 class="cartao__titulo">Mega</h3>
        <p class="cartao__preco"><em>R$ 1000</em></p>
        <article class="cartao__conteudo">
          <p class="cartao__texto">10 manutenções mensais</p>
          <p class="cartao__texto">App SEO</p>
          <p class="cartao__texto">2 sistemas operacionais</p>
          <a href="" class="cartao__botao cartao__botao--mega botao">Assinar plano</a>
        </article>
      </li>
    </ul>
  </section>

- código CSS seção "planos"

  - não fornecido nesta aula


- estrutura HTML seção "contato"

  <section class="contato container">
    <h2 class="contato__titulo">Contato</h2>
    <p>Entre em contato com a gente</p>
    <a href="contato.html" class="contato__botao botao">Entre em contato</a>
  </section>


- código CSS seção "contato"

  .contato {
    display: flex;
    flex-direction: column;
    align-items: center;

    text-align: center;

    padding-top: 2rem;
    padding-bottom: 2rem;
  }

  .contato__titulo {
    color: var(--cinza-escuro);
    font-weight: 700;
    font-size: 1.5rem;
    font-family: var(--montserrat);
    text-transform: uppercase;
    text-align: center;

    margin-bottom: 1.25rem;
  }

  .contato__botao {
    color: var(--cinza-escuro);

    border-color: var(--cinza-escuro);

    margin-top: 1rem;
  }


- estrutura HTML da seção "institucional"

  - não fornecida nesta aula


- código CSS da seção "institucional"

  .institucional {
    display: flex;
    flex-direction: column;
    align-items: center;

    color: var(--fonte-cinza);
    text-align: center;

    padding-top: 2rem;
    padding-bottom: 2rem;
  }

  .institucional__titulo {
    color: var(--cinza-escuro);
    font-weight: 700;
    font-size: 1.5rem;
    font-family: var(--montserrat);
    text-transform: uppercase;
    text-align: center;

    margin-bottom: 2rem;
  }

  .institucional__descricao {
    margin-bottom: 2rem;
  }

  .institucional__endereco {
    font-size: 1.5rem;
    line-height: normal;

    margin-bottom: 2rem;
  }

  .institucional__contato {
    font-size: 1.2rem;
    line-height: 1.8;

    margin-top: 2rem;
  }

  .institucional__contato-telefone {
    line-height: normal;
  }

  .institucional__contato-email {
    color: var(--fonte-link);
    text-decoration: underline;
    display: block;
  }

  .institucional__video {
    width: 100vw;
  }


### 4.5.  As tags address, video e br

  - vídeo

  - analisar layout
  - criar estruturas HTML das seções
  - definir CSS
  - tags semânticas (otimização CEO)
  - recomendação W3C


### 4.6.  Preparando o ambiente

  - copiar código

- código CSS da seção "rodape"

  .rodape {
    display: flex;
    flex-direction: column;
    align-items: center;

    background-color: var(--bg-rodape);

    padding-top: 2.5rem;
    padding-bottom: 2rem;
  }

  .rodape__social {
    display: flex;
  }

  .rodape__midia {
    display: block;

    width: 42px;
    height: 42px;

    margin: 2rem 1rem;
  }

  .rodape__navegacao {
    color: var(--branco);
    text-align: center;
    line-height: 3;
  }


  .rodape__link {
    display: inline-block;

    margin: 0 .5rem .7rem;
  }


### 4.7.  Atributo title

  - vídeo

  - estrutura do rodapé
  - semântica
    - tag "title"


### 4.8.  Semântica no código

  - atividade de fixação
    - vantagens do código semântico
      - acessibilidade
      - fácil compreensão do código
      - mecanismos de indexação


### 4.9.  Faça como eu fiz na aula

  - implementar etapas do projeto
  - esclarecer dúvidas

### 4.10. O que aprendemos

  - lidar com imagens do layout
  - tags e atributos semânticos
  - importância do código semântico



## 5.  Evoluindo do mobile ao desktop


### 5.1.  Projeto da aula anterior

  - link para baixar projeto inicial desta etapa
    https://github.com/alura-cursos/projeto-apeperia/archive/Aula4.zip


### 5.2.  Evoluindo o layout para tablet

  - vídeo

  - alterações
    - tamanho de tela
    - cores
    - posição dos elementos


### 5.3.  Media Query

  - atividade de fixação
    - sintaxe "media query"
      @media (min-width:768px) {propriedade:valor;}


### 5.4.  Para saber mais: breakpoints

  - referẽncia de site
    https://css-tricks.com/snippets/css/media-queries-for-standard-devices/


### 5.5.  Adaptação estrutural

  - vídeo

  - criar layout desktop
  - ajustar estruturas / estilos


### 5.6.  Preparando o ambiente

  - copiar códigos para incluir nos arquivos

- código CSS para arquivo "base.css"

  @media screen and (min-width: 1024px) {
    .container {
      padding-left: calc((100% - 940px)/2);
      padding-right: calc((100% - 940px)/2);
    }
  }

- código CSS para arquivo "cabecalho.css"

  @media screen and (min-width: 1024px) {
    .cabecalho {
      flex-direction: row;
      justify-content: space-between;

      border: none;
    }
  }

- Código CSS para arquivo "chamada.css"

  @media screen and (min-width: 1024px) {
    .chamada {
      background-image: url(../img/bg-intro.jpg);
      background-size: cover;

      padding-top: 8.25rem;
    }

    .chamada__titulo {
      font-size: 3.25rem;
      margin-bottom: 2rem;
    }
  }


- código CSS para arquivo "diferenciais.css"

  @media screen and (min-width: 1024px) {
    .diferenciais {
      background-color: var(--cinza-claro);
    }

    .diferenciais__lista {
      justify-content: space-around;
    }
  }

- código CSS para arquivo "institucional.css"

  @media screen and (min-width: 1024px) {
    .institucional__conteudo {
      width: 100%;

      display: flex;
      justify-content: space-between;

      text-align: left;
    }

    .institucional__video {
      align-self: flex-end;

      width: 375px;
    }

    .institucional__contato-email {
      display: block;
    }
  }


- código CSS para arquivo "planos.css"

  @media screen and (min-width: 1024px) {
    .planos__cartoes {
      flex-direction: row;
      justify-content: space-between;
      align-items: flex-end;
    }

    .cartao {
      max-width: 300px;
    }
  }

- código CSS para arquivo "rodape.css"

  @media screen and (min-width: 1024px) {
    .rodape {
      flex-direction: row;
      flex-wrap: wrap;
      justify-content: space-between;
    }

    .rodape__navegacao {
      text-align: left;

      min-width: 600px;
    }
  }

- código CSS para arquivo "sobre.css"

  @media screen and (min-width: 1024px) {
    .sobre {
      display: flex;
    }

    .sobre__conteudo {
      margin-right: 3rem;
    }

    .sobre__titulo {
      text-align: left;
    }

    .sobre__texto--divisao {
      border-bottom: 1px solid var(--cinza-medio);

      padding-bottom: 1.5rem;
    }

    .sobre__imagem {
      display: block;
    }
  }


### 5.7.  Finalizando o layout desktop

  - vídeo

  - ajustar layout / estrutura
  - finalizar projeto


### 5.8.  Faça como eu fiz na aula

  - implementar projeto
  - esclarecer dúvidas

### 5.9.  Projeto do curso

  - baixar projeto finalizado
    https://github.com/alura-cursos/projeto-apeperia/archive/Aula5.zip


### 5.10. O que aprendemos?

  - criar estilizações para diferentes dispositivos (media query)
  - adaptar estruturas / conteúdos para diferentes layouts
  - progredir layout mobile até desktop


### 5.11. Conclusão

  - vídeo

  - resumo do projeto
    - Plugin Emmet
    - Unidades "em" e "rem" / "vw" e "vh"
    - tipos de imagens (svg)
    - tag meta / viewport / initial scale
    - imagem ocupar toda largura (vw)
    - variáveis CSS
    -  desenvolvimento mobile first / tablet / desktop
    - media query / media types


/* --- fim ;)
